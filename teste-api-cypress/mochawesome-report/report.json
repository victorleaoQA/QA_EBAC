{
  "stats": {
    "suites": 3,
    "tests": 14,
    "passes": 14,
    "pending": 0,
    "failures": 0,
    "start": "2022-08-29T01:28:00.062Z",
    "end": "2022-08-29T01:28:19.428Z",
    "duration": 875,
    "testsRegistered": 14,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "0ced2757-d0f9-4fdb-8339-e6a96c92d224",
      "title": "",
      "fullFile": "cypress\\e2e\\login.cy.js",
      "file": "cypress\\e2e\\login.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "684d50e1-56b1-401c-bde3-401891ee454f",
          "title": "Teste de API - ServeRest",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve fazer login com sucesso",
              "fullTitle": "Teste de API - ServeRest Deve fazer login com sucesso",
              "timedOut": null,
              "duration": 160,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: 'http://localhost:3000/login',\n  body: {\n    \"email\": \"fulano@qa.com\",\n    \"password\": \"teste\"\n  }\n}).then(response => {\n  expect(response.status).to.equals(200);\n  expect(response.body.message).to.equals('Login realizado com sucesso');\n  cy.log(response.body.authorization);\n});",
              "err": {},
              "uuid": "bff638fc-6397-4668-82b9-76ae48f06c7f",
              "parentUUID": "684d50e1-56b1-401c-bde3-401891ee454f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bff638fc-6397-4668-82b9-76ae48f06c7f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 160,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "2fcc3bfe-7c85-468a-8810-e2616c5e7934",
      "title": "",
      "fullFile": "cypress\\e2e\\produtos.cy.js",
      "file": "cypress\\e2e\\produtos.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "328d310e-dbe0-419a-a60c-9b0a9a1741ef",
          "title": "Teste de funcionalidade produtos",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve validar contrato de produtos",
              "fullTitle": "Teste de funcionalidade produtos Deve validar contrato de produtos",
              "timedOut": null,
              "duration": 118,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('produtos').then(response => {\n  return _produtos.default.validateAsync(response.body);\n});",
              "err": {},
              "uuid": "9905cb36-8d45-4c7b-a8e9-cb63def99e87",
              "parentUUID": "328d310e-dbe0-419a-a60c-9b0a9a1741ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Listar produtos",
              "fullTitle": "Teste de funcionalidade produtos Listar produtos",
              "timedOut": null,
              "duration": 22,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: \"produtos\"\n});",
              "err": {},
              "uuid": "c92f3263-5a88-4121-bf9c-710b4b3bb8f2",
              "parentUUID": "328d310e-dbe0-419a-a60c-9b0a9a1741ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve validar uma mensagem de erro ao tentar cadastrar um memso produto",
              "fullTitle": "Teste de funcionalidade produtos Deve validar uma mensagem de erro ao tentar cadastrar um memso produto",
              "timedOut": null,
              "duration": 27,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.cadastrarProduto(token, \"Videogame\", 100, \"Descricao\", 200).then(response => {\n  expect(response.status).to.equals(400);\n  expect(response.body.message).to.equals(\"Já existe produto com esse nome\");\n});",
              "err": {},
              "uuid": "ecc41f5b-e165-4261-89de-0b78d4dc5aab",
              "parentUUID": "328d310e-dbe0-419a-a60c-9b0a9a1741ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cadastrar um produto",
              "fullTitle": "Teste de funcionalidade produtos Cadastrar um produto",
              "timedOut": null,
              "duration": 25,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produtoFake = faker.random.word();\nlet precoFake = faker.commerce.price(100, 1000, 0);\nlet descricaoFake = faker.commerce.productDescription();\nlet quantidadeFake = faker.random.numeric(4);\ncy.request({\n  method: \"POST\",\n  url: \"produtos\",\n  body: {\n    nome: produtoFake,\n    preco: precoFake,\n    descricao: descricaoFake,\n    quantidade: quantidadeFake\n  },\n  headers: {\n    authorization: token\n  }\n}).then(response => {\n  expect(response.status).to.equals(201);\n  expect(response.body.message).to.equals(\"Cadastro realizado com sucesso\");\n});",
              "err": {},
              "uuid": "407c855c-57d8-40c4-9829-fe5ae5488d89",
              "parentUUID": "328d310e-dbe0-419a-a60c-9b0a9a1741ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve fazer a edição de um determinado produto cadastrado",
              "fullTitle": "Teste de funcionalidade produtos Deve fazer a edição de um determinado produto cadastrado",
              "timedOut": null,
              "duration": 43,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request(\"produtos\").then(response => {\n  let produto = `iPhone ${Math.floor(Math.random() * 10000)}`;\n  let id = response.body.produtos[5]._id;\n  cy.request({\n    method: \"PUT\",\n    url: `produtos/${id}`,\n    headers: {\n      authorization: token\n    },\n    body: {\n      nome: produto,\n      preco: 470,\n      descricao: \"Nova descrição do produto\",\n      quantidade: 381\n    }\n  }).then(response => {\n    expect(response.status).to.equals(200);\n    expect(response.body.message).to.have.string(\"Registro alterado com sucesso\");\n  });\n});",
              "err": {},
              "uuid": "b6919056-2737-44a9-9261-1ccc3cd1a74f",
              "parentUUID": "328d310e-dbe0-419a-a60c-9b0a9a1741ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve fazer edição de um produto previamente cadastrado",
              "fullTitle": "Teste de funcionalidade produtos Deve fazer edição de um produto previamente cadastrado",
              "timedOut": null,
              "duration": 39,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.cadastrarProduto(token, \"Novo nome 100\", 500, \"Nova descrição\", 400).then(response => {\n  let id = response.body._id;\n  let produto = Math.floor(Math.random() * 1000000);\n  cy.request({\n    method: \"PUT\",\n    url: `produtos/${id}`,\n    headers: {\n      authorization: token\n    },\n    body: {\n      nome: `Novo Produto ${produto}`,\n      preco: 470,\n      descricao: \"Nova descrição do produto Brasil\",\n      quantidade: 381\n    }\n  }).then(response => {\n    expect(response.status).to.equals(200);\n    expect(response.body.message).to.have.string(\"Registro alterado com sucesso\");\n  });\n});",
              "err": {},
              "uuid": "210a1fc6-9f02-4059-aca0-1ade27596895",
              "parentUUID": "328d310e-dbe0-419a-a60c-9b0a9a1741ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve deletar um produto cadastrado",
              "fullTitle": "Teste de funcionalidade produtos Deve deletar um produto cadastrado",
              "timedOut": null,
              "duration": 60,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produdo = `Produto EBAC ${Math.floor(Math.random() * 10000)}`;\ncy.cadastrarProduto(token, produdo, 100, \"Descrição do produto novo\", 1000).then(response => {\n  let id = response.body._id;\n  cy.request({\n    method: 'DELETE',\n    url: `produtos/${id}`,\n    headers: {\n      authorization: token\n    }\n  }).then(response => {\n    expect(response.body.message).to.equal('Registro excluído com sucesso');\n    expect(response.status).to.equal(200);\n  });\n});",
              "err": {},
              "uuid": "177df5d2-00a3-4cfd-9fb1-d018bdeb5374",
              "parentUUID": "328d310e-dbe0-419a-a60c-9b0a9a1741ef",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9905cb36-8d45-4c7b-a8e9-cb63def99e87",
            "c92f3263-5a88-4121-bf9c-710b4b3bb8f2",
            "ecc41f5b-e165-4261-89de-0b78d4dc5aab",
            "407c855c-57d8-40c4-9829-fe5ae5488d89",
            "b6919056-2737-44a9-9261-1ccc3cd1a74f",
            "210a1fc6-9f02-4059-aca0-1ade27596895",
            "177df5d2-00a3-4cfd-9fb1-d018bdeb5374"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 334,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "ef97adba-5643-4fe7-b0f6-d3b8e3783a78",
      "title": "",
      "fullFile": "cypress\\e2e\\exercicio-api.cy.js",
      "file": "cypress\\e2e\\exercicio-api.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "298065e0-6ef0-49fb-a6ae-1f1a39cf4410",
          "title": "Testes da Funcionalidade Usuários",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve validar contrato de usuários",
              "fullTitle": "Testes da Funcionalidade Usuários Deve validar contrato de usuários",
              "timedOut": null,
              "duration": 135,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request(\"usuarios\").then(response => {\n  return _usuarios.default.validateAsync(response.body);\n});",
              "err": {},
              "uuid": "591543a3-7bc8-490e-af14-e44ccdca5fce",
              "parentUUID": "298065e0-6ef0-49fb-a6ae-1f1a39cf4410",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve listar usuários cadastrados",
              "fullTitle": "Testes da Funcionalidade Usuários Deve listar usuários cadastrados",
              "timedOut": null,
              "duration": 38,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: \"usuarios\"\n});",
              "err": {},
              "uuid": "86a56c5f-65f8-4617-8627-6b4a003aa7dc",
              "parentUUID": "298065e0-6ef0-49fb-a6ae-1f1a39cf4410",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve cadastrar um usuário com sucesso",
              "fullTitle": "Testes da Funcionalidade Usuários Deve cadastrar um usuário com sucesso",
              "timedOut": null,
              "duration": 48,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let nomeFake = _faker.faker.name.firstName();\nlet emailFake = _faker.faker.internet.email();\nlet senhaFake = _faker.faker.internet.password();\ncy.request({\n  method: \"POST\",\n  url: \"usuarios\",\n  body: {\n    nome: nomeFake,\n    email: emailFake,\n    password: senhaFake,\n    administrador: \"false\"\n  },\n  headers: {\n    authorization: token\n  }\n}).then(response => {\n  expect(response.status).to.equal(201);\n  expect(response.body.message).to.equal(\"Cadastro realizado com sucesso\");\n  expect(response.body).to.not.be.null;\n});",
              "err": {},
              "uuid": "98b0ca34-c9a0-4107-8005-26f67b70a44a",
              "parentUUID": "298065e0-6ef0-49fb-a6ae-1f1a39cf4410",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve validar um usuário com email inválido",
              "fullTitle": "Testes da Funcionalidade Usuários Deve validar um usuário com email inválido",
              "timedOut": null,
              "duration": 38,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"POST\",\n  url: \"usuarios\",\n  body: {\n    nome: \"Zé\",\n    email: \"emailinvalido.com\",\n    password: \"senha\",\n    administrador: \"false\"\n  },\n  headers: {\n    authorization: token\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.equal(400);\n  expect(response.body.email).to.equal(\"email deve ser um email válido\");\n  expect(response.body).to.not.be.null;\n});",
              "err": {},
              "uuid": "63739a5d-8fca-42aa-b961-8e3d4c9ca997",
              "parentUUID": "298065e0-6ef0-49fb-a6ae-1f1a39cf4410",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve editar um usuário previamente cadastrado",
              "fullTitle": "Testes da Funcionalidade Usuários Deve editar um usuário previamente cadastrado",
              "timedOut": null,
              "duration": 50,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let usuario = `José ${Math.floor(Math.random() * 1000000)}`;\nlet emailFake = _faker.faker.internet.email();\ncy.cadastrarUsuario(token, usuario, emailFake, \"senha@forte123\", \"false\").then(response => {\n  let id = response.body._id;\n  cy.request({\n    method: \"PUT\",\n    url: `usuarios/${id}`,\n    headers: {\n      authorization: token\n    },\n    body: {\n      nome: usuario,\n      email: emailFake,\n      password: \"teste\",\n      administrador: \"false\"\n    }\n  }).then(response => {\n    expect(response.status).to.equal(200);\n    expect(response.body.message).to.equal(\"Registro alterado com sucesso\");\n  });\n});",
              "err": {},
              "uuid": "4c439598-287a-41a0-bd4a-e1ad212226c9",
              "parentUUID": "298065e0-6ef0-49fb-a6ae-1f1a39cf4410",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve deletar um usuário previamente cadastrado",
              "fullTitle": "Testes da Funcionalidade Usuários Deve deletar um usuário previamente cadastrado",
              "timedOut": null,
              "duration": 72,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let usuario = `José ${Math.floor(Math.random() * 1000000)}`;\nlet emailFake = _faker.faker.internet.email();\ncy.cadastrarUsuario(token, usuario, emailFake, \"senha@forte123\", \"false\").then(response => {\n  let id = response.body._id;\n  cy.request({\n    method: \"DELETE\",\n    url: `usuarios/${id}`,\n    headers: {\n      authorization: token\n    }\n  }).then(response => {\n    expect(response.status).to.equal(200);\n    expect(response.body.message).to.equal(\"Registro excluído com sucesso\");\n  });\n});",
              "err": {},
              "uuid": "86845b78-67c1-4e6c-8fe2-a62af645dfa9",
              "parentUUID": "298065e0-6ef0-49fb-a6ae-1f1a39cf4410",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "591543a3-7bc8-490e-af14-e44ccdca5fce",
            "86a56c5f-65f8-4617-8627-6b4a003aa7dc",
            "98b0ca34-c9a0-4107-8005-26f67b70a44a",
            "63739a5d-8fca-42aa-b961-8e3d4c9ca997",
            "4c439598-287a-41a0-bd4a-e1ad212226c9",
            "86845b78-67c1-4e6c-8fe2-a62af645dfa9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 381,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "mochawesome-report",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}